name: Release-package

env:
  OPENWRT_SDK_DIR: "openwrt-sdk-19.07.3-imx6_gcc-7.5.0_musl_eabi.Linux-x86_64"

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:

#---------------------------------------------------------
# Buld package
#---------------------------------------------------------

      - name: Install missing dependencies
        run: |
          sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) main universe"
          sudo apt-get update
          sudo apt-get install libncurses5-dev       

      - name: Preparing, configuring and building the necessary tools using a precompiled SDK
        run: |
          curl -SL https://downloads.openwrt.org/releases/19.07.3/targets/imx6/generic/${{ env.OPENWRT_SDK_DIR}}.tar.xz | tar xJ
          cd ${{ env.OPENWRT_SDK_DIR}}
          ./scripts/feeds update -a
          ./scripts/feeds install libmosquitto
          make defconfig

      - name: Create project dir
        run: mkdir ${{ env.OPENWRT_SDK_DIR}}/package/VOYAGER-LINUX

      - name: Checks-out repository
        uses: actions/checkout@v2
        with:
          path: ${{ env.OPENWRT_SDK_DIR}}/package/VOYAGER-LINUX
          
      - name: Create local changes
        run: |
          cd ${{ env.OPENWRT_SDK_DIR}}/package/VOYAGER-LINUX
          echo "Test v1.0.0" >> README.md
          
      - name: Commit files
        run: |
          cd ${{ env.OPENWRT_SDK_DIR}}/package/VOYAGER-LINUX
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -am "Add test changes"
          git push

      #- name: Checks-out repository
      #  uses: actions/checkout@v2
      #  with:
      #    path: ${{ env.OPENWRT_SDK_DIR}}/package/VOYAGER-LINUX

      - name: Compile OpenWrt project
        run: |
          cd ${{ env.OPENWRT_SDK_DIR}}
          make package/VOYAGER-LINUX/compile
          
#---------------------------------------------------------
# End of buld package
#---------------------------------------------------------

      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          zip --junk-paths VOYAGER-LINUX ${{ env.OPENWRT_SDK_DIR}}/bin/packages/arm_cortex-a9_neon/base/VOYAGER-LINUX_*
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./VOYAGER-LINUX.zip
          asset_name: VOYAGER-LINUX.zip
          asset_content_type: application/zip
